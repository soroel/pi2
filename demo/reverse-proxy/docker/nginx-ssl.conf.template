#
# Frontend config:
#
server {
  # Use Docker's built-in DNS resolver to enable resolving container hostnames used in the proxy_pass
  # directives below.
  # https://stackoverflow.com/questions/35744650/docker-network-nginx-resolver
  resolver 127.0.0.11 ipv6=off;

  # Enable nginx to start even when upstream hosts are unreachable (i.e containers not started yet) 
  # https://sandro-keil.de/blog/let-nginx-start-if-upstream-host-is-unavailable-or-down/
  set $frontend_upstream http://frontend;

  server_name ${FRONTEND_DOMAIN_NAME};
  listen 443 ssl;

  ssl_certificate /etc/letsencrypt/live/${FRONTEND_DOMAIN_NAME}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/${FRONTEND_DOMAIN_NAME}/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  location /validation-key.txt {
    return 200 '${DOMAIN_VALIDATION_KEY}';
  }
  
  location / {
    proxy_pass $frontend_upstream;
  }
}

server {
  listen 80;
  server_name ${FRONTEND_DOMAIN_NAME};

  if ($host = ${FRONTEND_DOMAIN_NAME}) {
    return 302 https://$host$request_uri;
  }

  return 404;
}


#
# Backend config:
#
server {
  # Use Docker's built-in DNS resolver to enable resolving container hostnames used in the proxy_pass
  # directives below.
  # https://stackoverflow.com/questions/35744650/docker-network-nginx-resolver
  resolver 127.0.0.11 ipv6=off;

  # Enable nginx to start even when upstream hosts are unreachable (i.e containers not started yet) 
  # https://sandro-keil.de/blog/let-nginx-start-if-upstream-host-is-unavailable-or-down/
  set $backend_upstream http://backend:8000;

  server_name ${BACKEND_DOMAIN_NAME};
  listen 443 ssl;

  ssl_certificate /etc/letsencrypt/live/${BACKEND_DOMAIN_NAME}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/${BACKEND_DOMAIN_NAME}/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  # Increase timeouts
  proxy_connect_timeout 300s;
  proxy_send_timeout 300s;
  proxy_read_timeout 300s;
  send_timeout 300s;

  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  location / {
    proxy_pass $backend_upstream;
    
    # Important headers for secure cookies and CORS
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    
    # Increase buffer sizes for large requests
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    
    # Ensure cookies are properly forwarded
    proxy_cookie_domain ~^(?<cookie_domain>([a-z0-9]+(-[a-z0-9]+)*\.?)+)$ $cookie_domain;
    proxy_cookie_path / "/; secure; HttpOnly; SameSite=None";
  }
}

server {
  listen 80;
  server_name ${BACKEND_DOMAIN_NAME};

  if ($host = ${BACKEND_DOMAIN_NAME}) {
    return 302 https://$host$request_uri;
  }

  return 404;
}
